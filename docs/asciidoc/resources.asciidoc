= YARN 计算资源管理
Wu Yimin <wuyimin@rongcapital.cn>

Chorus基于YARN来做任务执行，系统需要分配给每个项目一些资源，以便项目人员能完成自己的任务执行；chorus的计算资源使用包含以下方面：

. 项目管理-》资源管理-》创建容器： 在yarn的spring xd application 中创建一个container，使用yarn的'spring-xd' queue；
. 数据开发-》任务开发-》创建批量/流式任务：某些任务的组件（dwsql，数据导入组件等）可能会提交MR job 到yarn上执行；
. 数据分析-》即席查询：一些hive sql 会提交MR 到yarn上执行；
. 数据分析-》数据实验室：数据实验室是作为项目的一个独立的application提交到yarn，默认会启动两个container，AM和zepllin

== Yarn Queue 分配策略

[ditaa]
....
      ROOT(100%)
      ├── default(20%)
      ├── chorus(50%)
      └── spring_xd(30%)
....

== Chorus中的资源

. 资源申请：包含CPU，内存和磁盘。用户按需申请先要的资源量；[red]#不能单独申请#
. 资源分配：记录项目总资源量记录(数据库记录) & [red]#创建资源总量对应的yarn queue# : #/root/chorus/<project_code>#
. 创建容器：在yarn spring xd application 中创建container; [red]#项目中所有container的cpu、内存和等于项目申请的资源总量#
. 总资源：//TODO
. 可用资源：//TODO

=== 存在的问题：

. 资源利用率：每个项目都申请了一些的资源，项目资源按照yarn queue分配和隔离；但是有的项目有任务，有的没有；有的任务执行时间很少，有的会多一点；资源利用率很低；
. 资源分配浪费：按照项目的申请资源数，项目实际可以用到的资源到达2倍多；
. Yarn queue 按照百分比分配，分配资源时百分比是按照项目申请的cpu或者内存占总资源的百分比取较大值分配设置的；比如申请1C，32G，实际设置的queue百分比得到的cpu数远远超出1C；
. 导致spring xd 容器启动失败：如果chorus队列比xd队列的资源多很多；审批资源时，chorus下的项目队列创建成功，但是用户提交创建容器时很有可能失败；
. YARN 计算集群扩容：需要重新计算每个项目的queue大小；
. Chorus 没有提供项目释放资源的接口

== 资源管理目标

. 资源利用率最大化
. 弹性：任务尽量执行
. 隔离和可靠性：多租户的任务之间互不影响

== 方案

=== YARN QUEUE 管理：
==== option1:静态资源分配，动态调度

[ditaa]
....
/-------------\                        /------------------\
|             |                        |queue 2C,4G * 5   | <------ task1, task 3, task7, ...
|             |                        |------------------|
|  130C,260G  |  -- pre allocation-->  |queue 4C,8G * 10  | <------ task2, task 4, task5, ...
|             |                        |------------------|
|             |                        |queue 8C,16G * 10 | <------ task6, task 8, task9, ...
\-------------/                        \------------------/

....

. 资源分配不需要创建对应的yarn queue; /root/chorus 资源全局共享
. 任务提交队列选择：按照项目的所有资源与队列之间的匹配
. 定时任务如果能做到执行时提交，不执行时释放队列，效率会更高，但是也更复杂；
. stream 任务尽量使用匹配队列提交
. 可以通过项目的任务提交的队列和执行时间计费; 如果提交到比项目拥有资源更大的队列上，可以按照用户的资源大小计算；
. queue的任务提交
.. 串行，只能有一个任务提交到一个队列？
.. 多租户串行，单用户内并行？

==== option2:提高资源虚化，设置更大的yarn queue弹性空间

[ditaa]
....
/-------------\            /-------------\                                         /--------------------------------------------\
|             |            |             |                                         |                                            |
|  100C,200G  |  ---4X-->  |  400C,800G  |  --- apply 8C,32G, queue size 4% -----> |  /root/chorus/project (4%,min:1%,max:14%)  |
|             |            |             |                                         |                                            |
\-------------/            \-------------/                                         \--------------------------------------------/
                                                                                                          |
                                                                                                        actual
                                                                                                          |
                                                                                                          V
                                                                                                  /---------------\
                                                                                                  |  4C,8G        |
                                                                                                  |  min: 1C,2G   |
                                                                                                  |  max: 14C,28G |
                                                                                                  \---------------/

....

. 采用高虚化和yarn queue的弹性能有效提高资源的利用率；chorus项目也能分配更多的资源(虚化提高了)
. 保留了queue的隔离好处，多租户间互不影响
. 因为弹性空间大，min值有可能不能满足用户job的最低container要求，导致任务提交失败

=== Spring XD queue 及 container 管理

. 资源实际上双倍分配给用户了
. container使用的资源没有在项目独立的queue里做限制
. container也不能共享使用


